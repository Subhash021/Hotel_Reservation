from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

# Sample room availability
rooms = {
    1: [101, 102, 105, 106],
    2: [201, 202, 203, 210],
    3: [301, 302]
}

booked_rooms = {}

class BookingRequest(BaseModel):
    guest_id: int
    num_rooms: int

class BookingResponse(BaseModel):
    guest_id: int
    booked_rooms: List[int]
    total_travel_time: int

def calculate_travel_time(selected_rooms):
    floors = list(set(room // 100 for room in selected_rooms))
    floors.sort()
    total_time = 0
    
    for i in range(len(floors) - 1):
        total_time += (floors[i+1] - floors[i]) * 2
    
    selected_rooms.sort()
    total_time += (selected_rooms[-1] % 100 - selected_rooms[0] % 100)
    
    return total_time

@app.get("/rooms/available")
def get_available_rooms():
    return rooms

@app.post("/book", response_model=BookingResponse)
def book_rooms(request: BookingRequest):
    available = []
    for floor, room_list in rooms.items():
        available.extend(room_list)
    
    if len(available) < request.num_rooms:
        raise HTTPException(status_code=400, detail="Not enough available rooms")
    
    selected_rooms = available[:request.num_rooms]
    total_time = calculate_travel_time(selected_rooms)
    
    for room in selected_rooms:
        floor = room // 100
        rooms[floor].remove(room)
        booked_rooms[room] = request.guest_id
    
    return BookingResponse(guest_id=request.guest_id, booked_rooms=selected_rooms, total_travel_time=total_time)

@app.post("/cancel")
def cancel_booking(guest_id: int):
    to_cancel = [room for room, guest in booked_rooms.items() if guest == guest_id]
    
    if not to_cancel:
        raise HTTPException(status_code=404, detail="No booking found")
    
    for room in to_cancel:
        floor = room // 100
        rooms[floor].append(room)
        del booked_rooms[room]
    
    return {"message": "Booking canceled", "canceled_rooms": to_cancel}
